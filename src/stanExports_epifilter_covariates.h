// Generated by rstantools.  Do not edit by hand.

/*
    epidp is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    epidp is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with epidp.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_epifilter_covariates_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 51> locations_array__ =
  {" (found before start of program)",
  " (in 'epifilter_covariates', line 10, column 2 to column 22)",
  " (in 'epifilter_covariates', line 11, column 2 to column 28)",
  " (in 'epifilter_covariates', line 12, column 2 to column 27)",
  " (in 'epifilter_covariates', line 15, column 2 to column 18)",
  " (in 'epifilter_covariates', line 16, column 2 to column 21)",
  " (in 'epifilter_covariates', line 47, column 2 to column 27)",
  " (in 'epifilter_covariates', line 18, column 11 to column 15)",
  " (in 'epifilter_covariates', line 18, column 4 to column 24)",
  " (in 'epifilter_covariates', line 20, column 6 to column 43)",
  " (in 'epifilter_covariates', line 31, column 10 to column 31)",
  " (in 'epifilter_covariates', line 30, column 8 to line 31, column 31)",
  " (in 'epifilter_covariates', line 29, column 13 to line 32, column 7)",
  " (in 'epifilter_covariates', line 24, column 8 to column 30)",
  " (in 'epifilter_covariates', line 26, column 10 to column 31)",
  " (in 'epifilter_covariates', line 25, column 8 to line 26, column 31)",
  " (in 'epifilter_covariates', line 28, column 10 to column 32)",
  " (in 'epifilter_covariates', line 27, column 8 to line 28, column 32)",
  " (in 'epifilter_covariates', line 23, column 27 to line 29, column 7)",
  " (in 'epifilter_covariates', line 23, column 13 to line 32, column 7)",
  " (in 'epifilter_covariates', line 22, column 8 to column 37)",
  " (in 'epifilter_covariates', line 21, column 17 to line 23, column 7)",
  " (in 'epifilter_covariates', line 21, column 6 to line 32, column 7)",
  " (in 'epifilter_covariates', line 33, column 6 to column 37)",
  " (in 'epifilter_covariates', line 19, column 18 to line 34, column 5)",
  " (in 'epifilter_covariates', line 19, column 4 to line 34, column 5)",
  " (in 'epifilter_covariates', line 17, column 2 to line 35, column 3)",
  " (in 'epifilter_covariates', line 49, column 4 to column 54)",
  " (in 'epifilter_covariates', line 48, column 2 to line 49, column 54)",
  " (in 'epifilter_covariates', line 39, column 4 to column 31)",
  " (in 'epifilter_covariates', line 40, column 4 to column 47)",
  " (in 'epifilter_covariates', line 38, column 16 to line 41, column 3)",
  " (in 'epifilter_covariates', line 38, column 2 to line 41, column 3)",
  " (in 'epifilter_covariates', line 42, column 2 to column 28)",
  " (in 'epifilter_covariates', line 43, column 2 to column 23)",
  " (in 'epifilter_covariates', line 44, column 2 to column 22)",
  " (in 'epifilter_covariates', line 2, column 2 to column 8)",
  " (in 'epifilter_covariates', line 3, column 8 to column 9)",
  " (in 'epifilter_covariates', line 3, column 2 to column 11)",
  " (in 'epifilter_covariates', line 4, column 2 to column 11)",
  " (in 'epifilter_covariates', line 5, column 13 to column 17)",
  " (in 'epifilter_covariates', line 5, column 2 to column 21)",
  " (in 'epifilter_covariates', line 6, column 2 to column 19)",
  " (in 'epifilter_covariates', line 7, column 9 to column 10)",
  " (in 'epifilter_covariates', line 7, column 12 to column 24)",
  " (in 'epifilter_covariates', line 7, column 2 to column 28)",
  " (in 'epifilter_covariates', line 11, column 9 to column 21)",
  " (in 'epifilter_covariates', line 12, column 24 to column 25)",
  " (in 'epifilter_covariates', line 15, column 15 to column 16)",
  " (in 'epifilter_covariates', line 16, column 18 to column 19)",
  " (in 'epifilter_covariates', line 47, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_epifilter_covariates final : public model_base_crtp<model_epifilter_covariates> {
private:
  int N;
  std::vector<int> C;
  int wmax;
  Eigen::Matrix<double,1,-1> w_data__;
  int N_covariates;
  Eigen::Matrix<double,-1,-1> X_data__;
  Eigen::Map<Eigen::Matrix<double,1,-1>> w{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
public:
  ~model_epifilter_covariates() {}
  model_epifilter_covariates(stan::io::var_context& context__, unsigned int
                             random_seed__ = 0, std::ostream*
                             pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_epifilter_covariates_namespace::model_epifilter_covariates";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 36;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 36;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 37;
      stan::math::validate_non_negative_index("C", "N", N);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "C", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      C = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 38;
      C = context__.vals_i("C");
      current_statement__ = 39;
      context__.validate_dims("data initialization", "wmax", "int",
        std::vector<size_t>{});
      wmax = std::numeric_limits<int>::min();
      current_statement__ = 39;
      wmax = context__.vals_i("wmax")[(1 - 1)];
      current_statement__ = 40;
      stan::math::validate_non_negative_index("w", "wmax", wmax);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "w", "double",
        std::vector<size_t>{static_cast<size_t>(wmax)});
      w_data__ = Eigen::Matrix<double,1,-1>::Constant(wmax,
                   std::numeric_limits<double>::quiet_NaN());
      new (&w) Eigen::Map<Eigen::Matrix<double,1,-1>>(w_data__.data(), wmax);
      {
        std::vector<local_scalar_t__> w_flat__;
        current_statement__ = 41;
        w_flat__ = context__.vals_r("w");
        current_statement__ = 41;
        pos__ = 1;
        current_statement__ = 41;
        for (int sym1__ = 1; sym1__ <= wmax; ++sym1__) {
          current_statement__ = 41;
          stan::model::assign(w, w_flat__[(pos__ - 1)],
            "assigning variable w", stan::model::index_uni(sym1__));
          current_statement__ = 41;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 42;
      context__.validate_dims("data initialization", "N_covariates", "int",
        std::vector<size_t>{});
      N_covariates = std::numeric_limits<int>::min();
      current_statement__ = 42;
      N_covariates = context__.vals_i("N_covariates")[(1 - 1)];
      current_statement__ = 43;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("X", "N_covariates",
        N_covariates);
      current_statement__ = 45;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(N_covariates)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N_covariates,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), N,
        N_covariates);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 45;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 45;
        pos__ = 1;
        current_statement__ = 45;
        for (int sym1__ = 1; sym1__ <= N_covariates; ++sym1__) {
          current_statement__ = 45;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 45;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 45;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 46;
      stan::math::validate_non_negative_index("beta", "N_covariates",
        N_covariates);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("epsilon", "N", N);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("E_cases", "N", N);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("R", "N", N);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("log_likelihood", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + N_covariates + N;
  }
  inline std::string model_name() const final {
    return "model_epifilter_covariates";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_epifilter_covariates_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 1;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_covariates,
          DUMMY_VAR__);
      current_statement__ = 2;
      beta = in__.template read<
               Eigen::Matrix<local_scalar_t__,-1,1>>(N_covariates);
      std::vector<local_scalar_t__> epsilon =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 3;
      epsilon = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__, N);
      std::vector<local_scalar_t__> E_cases =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> R =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      {
        current_statement__ = 7;
        stan::math::validate_non_negative_index("I_temp", "wmax", wmax);
        Eigen::Matrix<local_scalar_t__,-1,1> I_temp =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(wmax, DUMMY_VAR__);
        current_statement__ = 25;
        for (int t = 1; t <= N; ++t) {
          current_statement__ = 9;
          stan::model::assign(R,
            stan::math::exp(
              (stan::math::multiply(
                 stan::model::rvalue(X, "X", stan::model::index_uni(t)), beta)
              +
              stan::model::rvalue(epsilon, "epsilon",
                stan::model::index_uni(t)))), "assigning variable R",
            stan::model::index_uni(t));
          current_statement__ = 22;
          if (stan::math::logical_eq(t, 1)) {
            current_statement__ = 20;
            stan::model::assign(I_temp, stan::math::rep_vector(0, wmax),
              "assigning variable I_temp");
          } else {
            current_statement__ = 19;
            if (stan::math::logical_lte(t, wmax)) {
              int kk = std::numeric_limits<int>::min();
              current_statement__ = 13;
              kk = ((wmax - t) + 1);
              current_statement__ = 15;
              for (int i = 1; i <= (t - 1); ++i) {
                current_statement__ = 14;
                stan::model::assign(I_temp,
                  stan::model::rvalue(C, "C", stan::model::index_uni((t - i))),
                  "assigning variable I_temp", stan::model::index_uni(i));
              }
              current_statement__ = 17;
              for (int i = 1; i <= kk; ++i) {
                current_statement__ = 16;
                stan::model::assign(I_temp, 0, "assigning variable I_temp",
                  stan::model::index_uni(((i + t) - 1)));
              }
            } else {
              current_statement__ = 11;
              for (int i = 1; i <= wmax; ++i) {
                current_statement__ = 10;
                stan::model::assign(I_temp,
                  stan::model::rvalue(C, "C", stan::model::index_uni((t - i))),
                  "assigning variable I_temp", stan::model::index_uni(i));
              }
            }
          }
          current_statement__ = 23;
          stan::model::assign(E_cases,
            stan::math::multiply(
              stan::math::multiply(
                stan::model::rvalue(R, "R", stan::model::index_uni(t)), w),
              I_temp), "assigning variable E_cases",
            stan::model::index_uni(t));
        }
      }
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "R", R, 0);
      {
        current_statement__ = 32;
        for (int t = 2; t <= N; ++t) {
          current_statement__ = 29;
          lp_accum__.add(stan::math::poisson_lpmf<propto__>(
                           stan::model::rvalue(C, "C",
                             stan::model::index_uni(t)),
                           stan::model::rvalue(E_cases, "E_cases",
                             stan::model::index_uni(t))));
          current_statement__ = 30;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(epsilon, "epsilon",
                             stan::model::index_uni(t)),
                           stan::model::rvalue(epsilon, "epsilon",
                             stan::model::index_uni((t - 1))), sigma));
        }
        current_statement__ = 33;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(
                         stan::model::rvalue(epsilon, "epsilon",
                           stan::model::index_uni(1)), 0, 2));
        current_statement__ = 34;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma, 0, 1));
        current_statement__ = 35;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta, 0, 5));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_epifilter_covariates_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(N_covariates,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      beta = in__.template read<
               Eigen::Matrix<local_scalar_t__,-1,1>>(N_covariates);
      std::vector<double> epsilon =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      epsilon = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__, N);
      std::vector<double> E_cases =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> R =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      out__.write(sigma);
      out__.write(beta);
      out__.write(epsilon);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      {
        current_statement__ = 7;
        stan::math::validate_non_negative_index("I_temp", "wmax", wmax);
        Eigen::Matrix<double,-1,1> I_temp =
          Eigen::Matrix<double,-1,1>::Constant(wmax,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 25;
        for (int t = 1; t <= N; ++t) {
          current_statement__ = 9;
          stan::model::assign(R,
            stan::math::exp(
              (stan::math::multiply(
                 stan::model::rvalue(X, "X", stan::model::index_uni(t)), beta)
              +
              stan::model::rvalue(epsilon, "epsilon",
                stan::model::index_uni(t)))), "assigning variable R",
            stan::model::index_uni(t));
          current_statement__ = 22;
          if (stan::math::logical_eq(t, 1)) {
            current_statement__ = 20;
            stan::model::assign(I_temp, stan::math::rep_vector(0, wmax),
              "assigning variable I_temp");
          } else {
            current_statement__ = 19;
            if (stan::math::logical_lte(t, wmax)) {
              int kk = std::numeric_limits<int>::min();
              current_statement__ = 13;
              kk = ((wmax - t) + 1);
              current_statement__ = 15;
              for (int i = 1; i <= (t - 1); ++i) {
                current_statement__ = 14;
                stan::model::assign(I_temp,
                  stan::model::rvalue(C, "C", stan::model::index_uni((t - i))),
                  "assigning variable I_temp", stan::model::index_uni(i));
              }
              current_statement__ = 17;
              for (int i = 1; i <= kk; ++i) {
                current_statement__ = 16;
                stan::model::assign(I_temp, 0, "assigning variable I_temp",
                  stan::model::index_uni(((i + t) - 1)));
              }
            } else {
              current_statement__ = 11;
              for (int i = 1; i <= wmax; ++i) {
                current_statement__ = 10;
                stan::model::assign(I_temp,
                  stan::model::rvalue(C, "C", stan::model::index_uni((t - i))),
                  "assigning variable I_temp", stan::model::index_uni(i));
              }
            }
          }
          current_statement__ = 23;
          stan::model::assign(E_cases,
            stan::math::multiply(
              stan::math::multiply(
                stan::model::rvalue(R, "R", stan::model::index_uni(t)), w),
              I_temp), "assigning variable E_cases",
            stan::model::index_uni(t));
        }
      }
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "R", R, 0);
      if (emit_transformed_parameters__) {
        out__.write(E_cases);
        out__.write(R);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_likelihood =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 28;
      for (int t = 1; t <= N; ++t) {
        current_statement__ = 27;
        stan::model::assign(log_likelihood,
          stan::math::poisson_lpmf<false>(
            stan::model::rvalue(C, "C", stan::model::index_uni(t)),
            stan::model::rvalue(E_cases, "E_cases", stan::model::index_uni(t))),
          "assigning variable log_likelihood", stan::model::index_uni(t));
      }
      out__.write(log_likelihood);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 1;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_covariates,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_covariates),
        "assigning variable beta");
      out__.write(beta);
      std::vector<local_scalar_t__> epsilon =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(epsilon,
        in__.read<std::vector<local_scalar_t__>>(N),
        "assigning variable epsilon");
      out__.write_free_lb(0, epsilon);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(N_covariates)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "epsilon",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 1;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_covariates,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 2;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N_covariates; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      std::vector<local_scalar_t__> epsilon =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 3;
      epsilon = context__.vals_r("epsilon");
      out__.write_free_lb(0, epsilon);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"sigma", "beta", "epsilon"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"E_cases", "R"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_likelihood"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N_covariates)},
                std::vector<size_t>{static_cast<size_t>(N)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= N_covariates; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "epsilon" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "E_cases" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "R" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_likelihood" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= N_covariates; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "epsilon" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "E_cases" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "R" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_likelihood" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_covariates) + "},\"block\":\"parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"E_cases\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"log_likelihood\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_covariates) + "},\"block\":\"parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"E_cases\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"log_likelihood\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + N_covariates) + N);
    const size_t num_transformed = emit_transformed_parameters * ((N + N));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + N_covariates) + N);
    const size_t num_transformed = emit_transformed_parameters * ((N + N));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_epifilter_covariates_namespace::model_epifilter_covariates;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_epifilter_covariates_namespace::profiles__;
}
#endif
#endif
